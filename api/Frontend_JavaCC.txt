 
-------------------------------
| RTeasy frontend with JavaCC |
-------------------------------

 General Notes
---------------

The tree building tool JJTree of the JavaCC suite is used to construct the
abstract syntax tree (AST).
  Nodes implement the Interface Node (generated by JavaCC), extending
ParseTreeNode which in turn extends SimpleNode (gen. by JavaCC). ParseTreeNode
yields extensions to do bookkeeping on text positions using the special class
PositionRange.
  The subclasses implementing the node types of the AST bear filenames
beginning with "AST" by convention of JJTree. Their interface methods fit into
two groups:
 1. Parser Interface: Methods used by the parser (see RTeasyParser.jjt) to fill
    the nodes with content.
 2. Semantic Analysis Interface: Methods to gain information about the contents
    and to build up internal structures for the RTeasy kernel.
  Note that the custom-made interface needs only care about attributing (such as
operator type). The tree structure is automatically generated by JJTree code and
subnodes are then accessible via the (inherited) method jjtGetChild(int index).

 Building the Parser
---------------------

Parser befindet sich in de.uni_luebeck.iti.rteasy.frontend
Prinzipieller Ablauf:

- Sicherstellen, dass die "Properties" der Datei RTeasyParser.jjt folgendermassen
  gesetzt sind (in "JavaCC Options"):
   - 1. Tab (runtime):
     - Einstellen der javacc.jar-Datei, hier den Pfad zu javacc.jar angeben
     - Ausgabe in JavaCC Konsole aktivieren
   - 2. Tab (JJTree):
     - NODE_PACKAGE auf de.uni_luebeck.iti.rteasy setzen
     - Ausgabepfad auf das Verz. de/uni_luebeck/iti/rteasy/parser setzen

- Unter Window/View/Other die JavaCC-Konsole oeffnen

- Dann im Kontextmenue von RTeasyParser.jjt "Compile with JavaCC" auswaehlen
  (es sollte mindestens RTeasyParser.jj generiert werden, Fehlermeldungen
  sind in der JavaCC-Konsole)

- "Properties\JavaCC" von RTeasyParser.jj ueberpruefen:
   - 1. Tab (runtime) wie oben
   - 2. Tab (JavaCC):
     - Ausgabeverzeichnis wie oben
   - 3. Tab (JJDoc):
     - Ausgabeformat Text
     - Ausgabeverz. /doc
     - Dateiname RTeasyGrammar.txt
     
- Jetzt bei RTeasyParser.jj "Compile with JavaCC" auswaehlen, sollte alle notwendigen
  Dateien erstellen, ansonsten siehe JavaCC-Konsole.

Hinweise:
- Solange nicht alle Dateien von JJTree/JavaCC generiert sind, gibt es natuerlich auch
  Fehlermeldungen in den selbstgeschriebenen Parserdateien (AST*.java)
- Die Datei SimpleCharStream.java wird eigentlich von JavaCC generiert, ich habe sie
  aber abgeaendert, um das Tab-Symbol nur als 1 Zeichen zu zaehlen. JavaCC ueberschreibt
  die Datein nicht (und das ist auch gut so), meckert aber jedesmal.
- Falls jemand rauskriegt, wie die Einstellungen von Dateien auch ins Repository koennen,
  bitte sofort durchfuehren!!!

Build-Probleme unter Windows:  
  Unter Linux gab es überhaupt keine Probleme, den Parser zu generieren, unter
Windows aber viele. Dies liegt evtl. daran, dass Eclipse unter Win einen eigenen
Java-Compiler verwendet.
  Daher mussten an einigen von JavaCC generierten Dateien Aenderungen vorgenommen
werden, weshalb die generierten Dateien jetzt auch im Repository sind. Wenn man
jedoch den Parser neu bauen moechte, muss man trotzdem durch den im folgenden
geschilderten nervigen Prozess gehen:

- Nach dem Erzeugen von RTeasyParser.jj diese Datei editieren und dort in der
  ersten Zeile (Kommentar) die Pfadangabe loeschen. Grund: Eclipse und JavaCC
  interpretieren jedes "\u" bei "\uni" im Pfad des Packages de.uni_luebeck.iti.rteasy.parser
  als Unicode-Escape. Obwohl es ein Kommentar ist und kein String-Literal. Ist wohl
  das Eingabeformat fuer Java-Dateien. Da hat sich bei JavaCC keiner Gedanken drueber
  gemacht, die nutzen alle Linux und der Pfad hat keine Backslashes. Es muss einfach
  jedes "\u" durch "\\u" ersetzt werden.

- Dann RTeasyParser.jj mit JavaCC compilieren

- Einige generierte Dateien haben dann Fehlermeldungen. Das sind die, die auch den
  bloeden Kommentar mit Pfadangaben haben. Wieder \u durch \\u ersetzen.
  
 Nachtrag: Ich habe bei den JavaCC-Fuzzies eine Issue angelegt und einen Patch angehaengt.
 Mal sehen, ob etwas passiert: https://javacc.dev.java.net/issues/show_activity.cgi?id=81

 Error Recovery
----------------
  At https://javacc.dev.java.net/doc/errorrecovery.html a proposition about error recovery
for JavaCC can be found. The so-called "Deep Error Recovery" using try/catch is used.

 ASTExpr
---------

AST node type for RTeasy expressions.

Parser Interface:

   parser encounters              | calls
  -----------------------------------------------------------------------
   numerical constant             | setNumConst(String image,int radix)
   identifier                     | setVarRef(String identifier)
   monadic sign op or negation    | setMonOp(int optype)
   binary word ops, concatenation | addOp(int optype)
   comparison ops                 | setCmpOp(int optype)
   bit selection                  | setSelectBit()
   fixed range selection          | setSelectRange(BitRange br)
   
Semantic Analysis Interface:

   method                         | task
  -----------------------------------------------------------------------
   int getKind()                  | determine node kind
   